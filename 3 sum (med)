vector<vector<int>> result;
    sort(nums.begin(), nums.end());  // Sort the array to make it easier to skip duplicates.

    for (int i = 0; i < nums.size(); ++i) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;  // Skip duplicate values for the first element in the triplet.
        }

        int left = i + 1;
        int right = nums.size() - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            if (sum == 0) {
                result.push_back({nums[i], nums[left], nums[right]});

                // Move left and right pointers to avoid duplicates
                while (left < right && nums[left] == nums[left + 1]) {
                    ++left;
                }
                while (left < right && nums[right] == nums[right - 1]) {
                    --right;
                }

                ++left;
                --right;
            } else if (sum < 0) {
                ++left;  // Need a larger sum, move left pointer to the right.
            } else {
                --right;  // Need a smaller sum, move right pointer to the left.
            }
        }
    }
    
    return result;
