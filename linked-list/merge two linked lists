/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // Dummy node to form the starting point of the merged list
    ListNode* dummy = new ListNode(-1);
    ListNode* current = dummy;

    // Traverse both lists and append the smaller value to the merged list
    while (list1 != nullptr && list2 != nullptr) {
        if (list1->val < list2->val) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

    // Attach any remaining nodes from list1 or list2
    current->next = (list1 != nullptr) ? list1 : list2;

    // The merged list starts from dummy->next
    ListNode* mergedHead = dummy->next;
    delete dummy; // Free the dummy node
    return mergedHead;
}

// Helper function to print the linked list
void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " -> ";
        head = head->next;
    }
    cout << "null" << endl;
}

        
    
};
