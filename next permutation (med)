class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current;
        vector<bool> used(nums.size(), false); // To track used elements
        backtrack(nums, current, used, result);
        return result;
    }

    void backtrack(vector<int>& nums, vector<int>& current, vector<bool>& used, vector<vector<int>>& result) {
        // If current permutation is complete, add it to the result
        if (current.size() == nums.size()) {
            result.push_back(current);
            return;
        }

        // Try each unused number in the permutation
        for (int i = 0; i < nums.size(); i++) {
            if (used[i]) continue; // Skip if already used
            used[i] = true;
            current.push_back(nums[i]);
            backtrack(nums, current, used, result); // Recursive call
            // Undo the choice for backtracking
            current.pop_back();
            used[i] = false;
        }
    }
        
    
};
